#!/opt/macports/bin/bash

export LANG=en_US.UTF-8

shopt -s extglob


declare -a CONNECTIONS
declare -a NAMES

declare BACKEND
declare HOST
declare USER


function FillConnectionDetails() {
    declare name="$1"
    declare data

    BACKEND=
    HOST=
    USER=

    for data in "${CONNECTIONS[@]}"; do
        if [[ ${data%%|*} == "$name" ]]; then
            # 1st field is connection name, strip it
            data="${data#*|}"

            # 2nd field is backend
            BACKEND="${data%%|*}"
            data="${data#*|}"

            # 3rd field is host
            HOST="${data%%|*}"
            data="${data#*|}"

            # 4th field is user
            USER="${data%%|*}"
        fi
    done
}

function GetConnectionNames() {
    declare data
    NAMES=()

    for data in "${CONNECTIONS[@]}"; do
        NAMES+=("${data%%|*}")
    done
}

function GetPassword() {
    declare -r DESC="Please enter the password for user ${USER} on host ${HOST}"
    declare -r PROMPT="Password:"

    if [[ ! -t 0 ]]; then
        echo -en "SETDESC ${DESC}\nSETPROMPT ${PROMPT}\nGETPIN\n" | ${PINENTRY} | awk '/^D / {print $2}'
    else
        echo "$DESC" >&2
        read -r -s -p "$PROMPT"
        echo >&2
        echo "$REPLY"
    fi
}

function IsAnyConnectionActive() {
    declare name
    for name in "${NAMES[@]}"; do
        IsConnectionActive "${name}" && return 0
    done

    return 1
}

function IsConnectionActive() {
    FillConnectionDetails "$1"

    if [[ $BACKEND == openconnect ]]; then
        pgrep -q -f "${OPENCONNECT} ${HOST}"
        return $?
    elif [[ $BACKEND == openvpn ]]; then
        pgrep -q -f "${OPENVPN} ${HOST}/${USER}.conf"
        return $?
    else
        return 255
    fi

    return 1
}


# ensure user directory exists
[[ -e ~/.vpn ]] || mkdir ~/.vpn
cd ~/.vpn || exit 255

# ensure settings file exists
if [[ ! -e ~/.vpn/settings.sh ]]; then
    cat > ~/.vpn/settings.sh <<-_EOF_
		#!/bin/bash

		declare -r OPENCONNECT='openconnect'
		declare -r OPENVPN='openvpn'
		declare -r CONNECTED='VPN | color=black'
		declare -r DISCONNECTED='VPN | color=#cccccc'

		CONNECTIONS+=('Cisco Connection|openconnect|host|user')
		CONNECTIONS+=('OpenVPN Connection|openvpn|host|user')
		_EOF_
fi

# source settings file
[[ -e ~/.vpn/settings.sh ]] && source ~/.vpn/settings.sh



GetConnectionNames

if [[ -n $1 && -z $TEXTBAR_TEXT ]]; then
    connection="$1"
elif [[ -n $TEXTBAR_TEXT ]]; then
    connection="${TEXTBAR_TEXT}"
    connection="${connection%connected}"
    connection="${connection%dis}"
    connection="${connection%%*( )}"
fi


if [[ -n $connection ]]; then
    FillConnectionDetails "${connection}"
    if [[ -z $BACKEND || -z $HOST || -z $USER ]]; then
        osascript \
            -e 'on run(argv)' \
            -e 'tell application "System Events"' \
            -e '  display dialog item 1 of argv buttons {"OK"} with icon caution with title "No such connection"' \
            -e '  return' \
            -e 'end tell' \
            -e 'end' \
            -- "Connection ${connection} not found"
        exit 255
    fi

    if IsConnectionActive "${connection}"; then
        if [[ $BACKEND == openconnect ]]; then
            sudo pkill -INT -f "${OPENCONNECT} ${HOST} --config=${HOST}/${USER}.conf"
        elif [[ $BACKEND == openvpn ]]; then
            sudo pkill -INT -f "${OPENVPN} ${HOST}/${USER}.conf"
        fi
    else
        if [[ $BACKEND == openconnect ]]; then
            GetPassword "${USER}" | sudo "${OPENCONNECT}" "${HOST}" --config="${HOST}/${USER}.conf" --user="${USER}" --passwd-on-stdin
        elif [[ $BACKEND == openvpn ]]; then
            (echo "${USER}"; GetPassword "${USER}") | sudo "${OPENVPN}" "${HOST}/${USER}.conf" &>/dev/null
        fi
    fi

    exit
fi


if [[ ! -t 0 ]]; then
    if IsAnyConnectionActive; then
        echo -e "${CONNECTED}"
    else
        echo -e "${DISCONNECTED}"
    fi
fi

for connection in "${NAMES[@]}"; do
    if IsConnectionActive "${connection}"; then
        output="$(printf "%-25s %s" "$connection" "\e[90mconnected\e[0m")"
    else
        output="$(printf "%-25s %s" "$connection" "\e[90mdisconnected\e[0m")"
    fi

    if [[ -t 0 ]]; then
        echo -e "$output"
    else
        echo "$output"
    fi
done

if [[ ! -t 0 ]]; then
    echo "----TEXTBAR----"
    echo "REFRESH=5"
fi

